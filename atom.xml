<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.dike.tk</id>
    <title>Nyxyy的博客</title>
    <updated>2022-08-02T17:26:11.268Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.dike.tk"/>
    <link rel="self" href="https://blog.dike.tk/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://blog.dike.tk/images/avatar.png</logo>
    <icon>https://blog.dike.tk/favicon.ico</icon>
    <rights>All rights reserved 2022, Nyxyy的博客</rights>
    <entry>
        <title type="html"><![CDATA[利用CloudFlare workers加速github]]></title>
        <id>https://blog.dike.tk/post/li-yong-cloudflare-workers-jia-su-github/</id>
        <link href="https://blog.dike.tk/post/li-yong-cloudflare-workers-jia-su-github/">
        </link>
        <updated>2022-08-02T16:57:03.000Z</updated>
        <content type="html"><![CDATA[<pre><code>	简单记录一下利用CloudFlare workers加速github的搭建过程，其实基本上也都是抄的人家的
</code></pre>
<h2 id="1-搭建github加速workers">1. 搭建github加速workers</h2>
<p>​		首先cloudflare全局中创建一个work，点击workers创建自己的子域，我选择了一个我在CF上托管的域名，这个子域实际上是能全球解析访问的，所以不允许重名，填写好名字后其它设置默认即可创建子域。</p>
<p>​		然后创建服务，服务的名字可以用ghproxy，其它设置默认即可，创建后点快速编辑，粘贴如下内容，点击保存并部署后在右侧点击发送进行测试，测试通过就完成了worker的创建</p>
<pre><code>'use strict'

/**

 * static files (404.html, sw.js, conf.js)
   */
   const ASSET_URL = 'https://hunshcn.github.io/gh-proxy/'
   // 前缀，如果自定义路由为example.com/gh/*，将PREFIX改为 '/gh/'，注意，少一个杠都会错！
   const PREFIX = '/'
   // 分支文件使用jsDelivr镜像的开关，0为关闭，默认关闭
   const Config = {
   jsdelivr: 0
   }

const whiteList = [] // 白名单，路径里面有包含字符的才会通过，e.g. ['/username/']

/** @type {RequestInit} */
const PREFLIGHT_INIT = {
    status: 204,
    headers: new Headers({
        'access-control-allow-origin': '*',
        'access-control-allow-methods': 'GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS',
        'access-control-max-age': '1728000',
    }),
}


const exp1 = /^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:releases|archive)\/.*$/i
const exp2 = /^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:blob|raw)\/.*$/i
const exp3 = /^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:info|git-).*$/i
const exp4 = /^(?:https?:\/\/)?raw\.(?:githubusercontent|github)\.com\/.+?\/.+?\/.+?\/.+$/i
const exp5 = /^(?:https?:\/\/)?gist\.(?:githubusercontent|github)\.com\/.+?\/.+?\/.+$/i
const exp6 = /^(?:https?:\/\/)?github\.com\/.+?\/.+?\/tags.*$/i

/**

 * @param {any} body
 * @param {number} status
 * @param {Object&lt;string, string&gt;} headers
   */
   function makeRes(body, status = 200, headers = {}) {
   headers['access-control-allow-origin'] = '*'
   return new Response(body, {status, headers})
   }


/**

 * @param {string} urlStr
   */
   function newUrl(urlStr) {
   try {
       return new URL(urlStr)
   } catch (err) {
       return null
   }
   }


addEventListener('fetch', e =&gt; {
    const ret = fetchHandler(e)
        .catch(err =&gt; makeRes('cfworker error:\n' + err.stack, 502))
    e.respondWith(ret)
})


function checkUrl(u) {
    for (let i of [exp1, exp2, exp3, exp4, exp5, exp6]) {
        if (u.search(i) === 0) {
            return true
        }
    }
    return false
}

/**

 * @param {FetchEvent} e
   */
   async function fetchHandler(e) {
   const req = e.request
   const urlStr = req.url
   const urlObj = new URL(urlStr)
   let path = urlObj.searchParams.get('q')
   if (path) {
       return Response.redirect('https://' + urlObj.host + PREFIX + path, 301)
   }
   // cfworker 会把路径中的 `//` 合并成 `/`
   path = urlObj.href.substr(urlObj.origin.length + PREFIX.length).replace(/^https?:\/+/, 'https://')
   if (path.search(exp1) === 0 || path.search(exp5) === 0 || path.search(exp6) === 0 || path.search(exp3) === 0 || path.search(exp4) === 0) {
       return httpHandler(req, path)
   } else if (path.search(exp2) === 0) {
       if (Config.jsdelivr) {
           const newUrl = path.replace('/blob/', '@').replace(/^(?:https?:\/\/)?github\.com/, 'https://cdn.jsdelivr.net/gh')
           return Response.redirect(newUrl, 302)
       } else {
           path = path.replace('/blob/', '/raw/')
           return httpHandler(req, path)
       }
   } else if (path.search(exp4) === 0) {
       const newUrl = path.replace(/(?&lt;=com\/.+?\/.+?)\/(.+?\/)/, '@$1').replace(/^(?:https?:\/\/)?raw\.(?:githubusercontent|github)\.com/, 'https://cdn.jsdelivr.net/gh')
       return Response.redirect(newUrl, 302)
   } else {
       return fetch(ASSET_URL + path)
   }
   }


/**

 * @param {Request} req

 * @param {string} pathname
   */
   function httpHandler(req, pathname) {
   const reqHdrRaw = req.headers

   // preflight
   if (req.method === 'OPTIONS' &amp;&amp;
       reqHdrRaw.has('access-control-request-headers')
   ) {
       return new Response(null, PREFLIGHT_INIT)
   }

   const reqHdrNew = new Headers(reqHdrRaw)

   let urlStr = pathname
   let flag = !Boolean(whiteList.length)
   for (let i of whiteList) {
       if (urlStr.includes(i)) {
           flag = true
           break
       }
   }
   if (!flag) {
       return new Response(&quot;blocked&quot;, {status: 403})
   }
   if (urlStr.startsWith('github')) {
       urlStr = 'https://' + urlStr
   }
   const urlObj = newUrl(urlStr)

   /** @type {RequestInit} */
   const reqInit = {
       method: req.method,
       headers: reqHdrNew,
       redirect: 'manual',
       body: req.body
   }
   return proxy(urlObj, reqInit)
   }


/**
 *

 * @param {URL} urlObj

 * @param {RequestInit} reqInit
   */
   async function proxy(urlObj, reqInit) {
   const res = await fetch(urlObj.href, reqInit)
   const resHdrOld = res.headers
   const resHdrNew = new Headers(resHdrOld)

   const status = res.status

   if (resHdrNew.has('location')) {
       let _location = resHdrNew.get('location')
       if (checkUrl(_location))
           resHdrNew.set('location', PREFIX + _location)
       else {
           reqInit.redirect = 'follow'
           return proxy(newUrl(_location), reqInit)
       }
   }
   resHdrNew.set('access-control-expose-headers', '*')
   resHdrNew.set('access-control-allow-origin', '*')

   resHdrNew.delete('content-security-policy')
   resHdrNew.delete('content-security-policy-report-only')
   resHdrNew.delete('clear-site-data')

   return new Response(res.body, {
       status,
       headers: resHdrNew,
   })
   }
</code></pre>
<h2 id="2-创建反代路由">2. 创建反代路由</h2>
<p>​		切换到自己想用的域名下，首先创建一条DNS的A记录，记录值随便写，最好是能ping。然后到workers中添加路由，添加的内容照着下图抄就可以了。<br>
<img src="https://blog.dike.tk/post-images/1659460829222.png" alt="" loading="lazy"></p>
<h2 id="3-参考链接">3. 参考链接</h2>
<ul>
<li>[1] <a href="https://www.kejiwanjia.com/jiaocheng/105320.html">利用域名无需魔法访问cloudflare workers(重新实现github加速) </a></li>
<li>[2] <a href="https://www.kejiwanjia.com/jiaocheng/70055.html">白嫖cloudflare搭建属于自己的git加速站-2022年8月1日更新</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[测试文章]]></title>
        <id>https://blog.dike.tk/post/ce-shi-wen-zhang/</id>
        <link href="https://blog.dike.tk/post/ce-shi-wen-zhang/">
        </link>
        <updated>2022-08-01T18:56:31.000Z</updated>
        <summary type="html"><![CDATA[<p>11111</p>
]]></summary>
        <content type="html"><![CDATA[<p>11111</p>
<!-- more -->
<p>22222</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git访问自建自签Bitbucket遇到GnuTLS handshake error]]></title>
        <id>https://blog.dike.tk/post/git-fang-wen-zi-jian-zi-qian-bitbucket-yu-dao-gnutls-handshake-error/</id>
        <link href="https://blog.dike.tk/post/git-fang-wen-zi-jian-zi-qian-bitbucket-yu-dao-gnutls-handshake-error/">
        </link>
        <updated>2022-08-01T18:55:26.000Z</updated>
        <content type="html"><![CDATA[<p><strong>故障现象</strong></p>
<p>在Ubuntu的新版本上执行下面命令时，报错gnutls_handshake() failed: Handshake failed<br>
git clone https://bitbucket.company.com/projects/xxx/yyy/zzz.git<br>
解决办法</p>
<ul>
<li>目前排查下来是Ubuntu 新版上面使用的gnutls和bitbucket的兼容性问题，最简单的办法是创建/etc/gnutls/config文件并写入如下内容</li>
</ul>
<p>disabled-version = tls1.3<br>
这些设置基本上就够了</p>
]]></content>
    </entry>
</feed>